<!DOCTYPE html>
<html>
<head>
    <title>Private Chatroom</title>
    <link rel="stylesheet" href="@Url.Content("~/Content/chat.css")" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.0.js"></script>
</head>
<body>
    <nav class="navbar navbar-inverse">
        <div class="container-fluid">
            <div class="navbar-header">
                <a class="navbar-brand" href="#">SecureChat - @ViewBag.currentUser.Name </a>
            </div>
            <ul class="nav navbar-nav navbar-right">
                <li><a href="#">Log Out</a></li>
            </ul>
        </div>
    </nav>
    <div class="container">
        <div class="row">
            <div class="col-xs-12 col-md-3">
                <aside class="main">
                    <div class="row">
                        <div class="col-xs-12">
                            <div class="panel panel-default users__bar">
                                <div class="panel-heading users__heading">
                                    Contacts (@ViewBag.allUsers.Count)
                                </div>
                                <div class="__no__chat__">
                                    <p>Select a contact to chat with</p>
                                </div>
                                <div class="panel-body users__body">
                                    <ul id="contacts" class="list-group">

                                        @foreach (var user in @ViewBag.allUsers)
                                        {
                                            <a class="user__item contact-@user.Id" href="#" data-contact-id="@user.Id" data-contact-name="@user.Name">
                                                <li>
                                                    <div class="avatar">
                                                        <img src="@Url.Content("~/Content/no_avatar.png")">
                                                    </div>
                                                    <span>@user.Name</span>
                                                    <div class="status-bar"></div>
                                                </li>
                                            </a>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </aside>


            </div>
            <div class="col-xs-12 col-md-9 chat__body">
                <div class="row">
                    <div class="col-xs-12 chat_field">
                        <ul class="list-group chat__main"></ul>
                    </div>
                    <div class="chat__type__body">
                        <div class="chat__type">
                            <textarea id="msg_box" placeholder="Type your message"></textarea>
                            <button class="btn btn-primary" id="sendMessage">Send</button>
                        </div>
                    </div>
                    <div class="chat__typing">
                        <span id="typerDisplay"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://js.pusher.com/4.0/pusher.min.js"></script>
    <script>
            //////////// Variable Instantiation

            function throttle(callback, wait, context = this) {
                let timeout = null
                let callbackArgs = null

                const later = () => {
                    callback.apply(context, callbackArgs)
                    timeout = null
                }

                return function() {
                    if (!timeout) {
                        callbackArgs = arguments
                        timeout = setTimeout(later, wait)
                    }
                }
            }


                //Pusher client side setup
            const pusher = new Pusher('2f3520b0b549573f4208', {
                cluster: 'eu',
                forceTLS: true
            });

            pusher.connection.bind('connected', function() {
                socketId = pusher.connection.socket_id;
            });

            let currentContact = null; // Holds contact currently being chatted with
            let socketId = null;
            let currentconversationChannel = null;//pusher.subscribe('chat-' + @ViewBag.currentUser.Id );
            let conversationChannelName = null;
            let newMessageTpl =
            `<div>
                <div id="msg-{{id}}" class="row __chat__par__">
                    <div class="__chat__">
                    <p>{{body}}</p>
                    <p class="delivery-status">Delivered</p>
                    </div>
                </div>
                </div>`;
            /////////////////////////////////
            const chatAppChannel = pusher.subscribe('presence-chat');
            chatAppChannel.bind("pusher:subscription_succeeded", function(members) {
                members.each(function(member) {
                    setContactStatus(member.info.id, 1);
                });
            });

            chatAppChannel.bind("pusher:member_added", function(member){
                setContactStatus(member.info.id, 1);
            });

            chatAppChannel.bind("pusher:member_removed", function(member){
                setContactStatus(member.info.id, 0);
            });

            function setContactStatus(contact_id, status) {
                var contactObj = $('#contacts .contact-' + contact_id);
                if ( status ) {
                    contactObj.find('.status-bar').addClass('active');
                } else {
                    contactObj.find('.status-bar').removeClass('active');
                }
            }
            function displayMessage(message_obj) {
                const msg_id = message_obj.Id;
                const msg_body = message_obj.Message;
                let template = $(newMessageTpl).html();
                template = template.replace("{{id}}", msg_id);
                template = template.replace("{{body}}", msg_body);
                template = $(template);
                if ( message_obj.SenderId == @ViewBag.currentUser.Id ) {
                    template.find('.__chat__').addClass('from__chat');
                } else {
                    template.find('.__chat__').addClass('receive__chat');
                }
                if ( message_obj.Status == 1 ) {
                    template.find('.delivery-status').show();
                }
                $('.chat__main').append(template);
            }
            // get chat data
            function getChat(contact_id) {
                $.get("/contact/conversations/" + contact_id)
                    .done( function(resp) {
                    let chat_data = resp.data || [];
                    loadChat( chat_data );
                    });
            }
            //load chat data into view
            function loadChat(chat_data) {
                chat_data.forEach( function(data) {
                    displayMessage(data);
                });

                $('.chat__body').show();
                $('.__no__chat__').hide();
            }
            // select contact to chat with
        $('.user__item').click(function (e) {
            $(".chat__main").empty();
            e.preventDefault();
            currentContact = {
                Id: $(this).data('contact-id'),
                Name: $(this).data('contact-name'),
            };
            if (conversationChannelName) {
                pusher.unsubscribe(conversationChannelName);
            }
            conversationChannelName = getConvoChannel(@ViewBag.currentUser.Id, currentContact.Id);
            currentconversationChannel = pusher.subscribe(conversationChannelName);
            bind_client_events();

            $('#contacts').find('li').removeClass('active');
            $('#contacts .contact-' + currentContact.Id).find('li').addClass('active');
            getChat(currentContact.Id);
            $(".chat_field").ready(function () {
                setTimeout(function () {
                    console.log('xxx');
                    var elem = document.getElementsByClassName('chat_field');
                    elem[0].scrollTop = elem[0].scrollHeight;
                }, 200);
            }); 
        });
            function getConvoChannel(user_id, contact_id) {
                if ( user_id > contact_id ) {
                    return 'private-chat-' + contact_id + '-' + user_id;
                }
                return 'private-chat-' + user_id + '-' + contact_id;
            }
            //User is typing
            var isTypingCallback = throttle(function() {
                currentconversationChannel.trigger("client-is-typing", {
                    user_id: @ViewBag.currentUser.Id,
                    contact_id: currentContact.Id,
                });
            }, 1000);
            $('#msg_box').on('keyup',isTypingCallback);
            ///////////////////Sending Messages/////////////////////
            $('#sendMessage').click(function() {
                $.post("/send_message", {
                    message: $('#msg_box').val(),
                    contact: currentContact.Id,
                    socket_id: socketId,
                }).done(function (data) {
                    displayMessage(data);
                    $('#msg_box').val('');
                });
            });
            function bind_client_events(){
                currentconversationChannel.bind("client-is-typing", function(data) {
                    if ( data.user_id == currentContact.Id && data.contact_id == @ViewBag.currentUser.Id) {
                        $('#typerDisplay').text(currentContact.Name + ' is typing...');
                        $('.chat__typing').fadeIn(100, function() {
                            $('.chat__type__body').addClass('typing_display__open');
                        }).delay(1000).fadeOut(300, function(){
                            $('.chat__type__body').removeClass('typing_display__open');
                        });
                    }
                });
                currentconversationChannel.bind("new_message", function(msg) {
                        if ( msg.ReceiverId == @ViewBag.currentUser.Id) {
                        displayMessage(msg);
                        }
                        $.post("/message_delivered/" + msg.Id, {
                        socket_id: socketId,
                        });
                });
                currentconversationChannel.bind("message_delivered", function(msg) {
                    $('#msg-' + msg.Id).find('.delivery-status').show();
                });
            }
    </script>
</body>
</html>